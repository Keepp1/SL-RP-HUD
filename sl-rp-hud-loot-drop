//start_unprocessed_text
/*#include "config.lsl"
string machine_name = "__ENTER_NAME_FOR_LOGGING__";
/|/Strided list of the format "_ITEM_NAME_", (integer)relative_weight (See notes)
list droppables = [
];
integer max_distance_from_object = 5;
integer min_level = 1;

integer cooldown_seconds = 60;
float cooldown_seconds_variation_percent = .5;

string success_msg = "After toiling and grinding, ITEM_NAME is uncovered."; /|/ITEM_NAME for the item received
string damage_msg = "After toiling and grinding, ITEM_NAME is uncovered. Something went wrong and you got hurt!"; /|/ITEM_NAME for the item received

integer health_damage_probability_percent = 75;
integer health_damage_amount = 1;
integer xp_penalty_probability_percent = 75;
integer xp_penalty_amount = 1;

string hash_seed = HASH_SEED;
integer meter_chan = METER_CHAN;
integer meter_listener;
list creators = [CREATORS];
key toucher;
key http_request_id;
integer sum;
integer num_droppables;
string received_item;

default {
  state_entry() {
    integer i;
    sum = 0;
    num_droppables = llGetListLength(droppables);
    for (i=0;i<num_droppables;i+=2) {
      sum += llList2Integer(droppables, i+1);
    }
  }
  touch_start(integer total_number) {
    toucher = llDetectedKey(0);
    if (llVecDist(llGetPos(), llDetectedPos(0)) <= max_distance_from_object) {
      received_item = "";
      llSetTimerEvent(15);
      meter_listener = llListen(meter_chan, "", NULL_KEY, "");
      llRegionSayTo(toucher, meter_chan, "Ping");
    } else {
      llRegionSayTo(toucher, 0, "Not close enough to touch this.");
    }
  }
  http_response(key request_id, integer status, list metadata, string body) {
    if (request_id == http_request_id) {
      if (llSubStringIndex(body, "ERR,") == 0) {
        llSay(0, "Error: " + llGetSubString(body, 4, llStringLength(body) - 1));
      } else if (llSubStringIndex(body, "STAT,") == 0) {
        list fields = llCSV2List(llGetSubString(body, 5, llStringLength(body) - 1));
        integer experience = llList2Integer(fields, 3);
        integer level = llList2Integer(fields, 14);
        if (level >= min_level) {
          integer rand = llRound(llFrand(sum));
          integer i; integer running = 0;
          for (i=0;i<num_droppables;i+=2) {
            running += llList2Integer(droppables, i+1);
            if (running >= rand) {
              received_item = llList2String(droppables, i);
              string msg = success_msg;

              string params = "STAT,";

              float rand = llFrand(100);
              if (rand < (float)xp_penalty_probability_percent) {
                params += "-" + (string)xp_penalty_amount;
                msg = damage_msg;
              }
              params += ",";

              rand = llFrand(100);
              if (rand < (float)health_damage_probability_percent) {
                params += "-" + (string)health_damage_amount;
                msg = damage_msg;
              }

              if (msg == damage_msg) {
                llRegionSayTo(toucher,
                              meter_chan,
                              params + ",,,,,"
                             );
                llSetTimerEvent(15);
                meter_listener = llListen(meter_chan, "", NULL_KEY, "");
              } else {
                llGiveInventory(toucher, received_item);
                string params = "uuid=" + (string)toucher + "&hash=" + llSHA1String((string)toucher + hash_seed)
                              + "&action=c&is_crit_fail=No&item=" + received_item
                              + "&source=" + machine_name
                              + "&cooldown=" + (string)((integer)((1 + llFrand(2 * cooldown_seconds_variation_percent) - cooldown_seconds_variation_percent) * cooldown_seconds));
                http_request_id = llHTTPRequest(API_URL,
                                                [
                                                  HTTP_METHOD, "POST",
                                                  HTTP_MIMETYPE, "application/x-www-form-urlencoded"
                                                ],
                                                params);
              }

              integer index;
              while ((index = llSubStringIndex(msg, "ITEM_NAME")) > -1) {
                msg = llGetSubString(msg, 0, index - 1) + received_item + llGetSubString(msg, index + 9, llStringLength(msg) - 1);
              }

              llRegionSayTo(toucher, 0, msg);
              return;
            }
          }
          llRegionSayTo(toucher, 0, "Did not select an object. This should not have happened.");
        } else {
          llSay(0, "You do not have the minimum required level (" + (string)min_level + ") to use this device.");
        }
      } else if (body != "SILENT") {
        llSay(0, "Unexpected response: " + body);
      }
    } else {
      llRegionSayTo(toucher, meter_chan, "1");
    }
  }
  listen(integer channel, string name, key id, string message) {
    if (channel == meter_chan) {
      if (message == "1") {
        llGiveInventory(toucher, received_item);
        llSetTimerEvent(0);
        llListenRemove(meter_listener);
        string params = "uuid=" + (string)toucher + "&hash=" + llSHA1String((string)toucher + hash_seed)
                      + "&action=c&is_crit_fail=No&item=" + received_item
                      + "&source=" + machine_name
                      + "&cooldown=" + (string)((integer)((1 + llFrand(2 * cooldown_seconds_variation_percent) - cooldown_seconds_variation_percent) * cooldown_seconds));

        http_request_id = llHTTPRequest(API_URL,
                                        [
                                          HTTP_METHOD, "POST",
                                          HTTP_MIMETYPE, "application/x-www-form-urlencoded"
                                        ],
                                        params);
      } else if (llSubStringIndex(message, "Pong,") == 0) {
        llSetTimerEvent(0);
        if ((key)llGetSubString(message, 5, llStringLength(message) -1) == toucher) {
          string params = "uuid=" + (string)toucher + "&hash=" + llSHA1String((string)toucher + hash_seed)
                        + "&action=r&is_drop=1&source=" + machine_name;

          http_request_id = llHTTPRequest(API_URL,
                                          [
                                            HTTP_METHOD, "POST",
                                            HTTP_MIMETYPE, "application/x-www-form-urlencoded"
                                          ],
                                          params);
        }
      }
    }
  }
  timer() {
    llSetTimerEvent(0);
    llListenRemove(meter_listener);
    llSay(0, "Your HUD did not respond in time. You may have to detach and reattach.");
  }
}*/
//end_unprocessed_text
//nfo_preprocessor_version 0
//program_version Firestorm-Releasex64 6.3.2.58052 - Cypher Hijinks
//last_compiled 05/06/2020 17:14:57
//mono


//#line 2 "C:\\Program Files\\Firestorm-releasex64\\sl-rp-hud-loot-drop"
string machine_name = "__ENTER_NAME_FOR_LOGGING__";

list droppables = [
];
integer max_distance_from_object = 5;
integer min_level = 1;

integer cooldown_seconds = 60;
float cooldown_seconds_variation_percent = .5;

string success_msg = "After toiling and grinding, ITEM_NAME is uncovered.";
string damage_msg = "After toiling and grinding, ITEM_NAME is uncovered. Something went wrong and you got hurt!";

integer health_damage_probability_percent = 75;
integer health_damage_amount = 1;
integer xp_penalty_probability_percent = 75;
integer xp_penalty_amount = 1;

string hash_seed = "";
integer meter_chan = 0;
integer meter_listener;
list creators = ["UUID", "UUID"];
key toucher;
key http_request_id;
integer sum;
integer num_droppables;
string received_item;

default {
  state_entry() {
    integer i;
    sum = 0;
    num_droppables = llGetListLength(droppables);
    for (i=0;i<num_droppables;i+=2) {
      sum += llList2Integer(droppables, i+1);
    }
  }
  touch_start(integer total_number) {
    toucher = llDetectedKey(0);
    if (llVecDist(llGetPos(), llDetectedPos(0)) <= max_distance_from_object) {
      received_item = "";
      llSetTimerEvent(15);
      meter_listener = llListen(meter_chan, "", NULL_KEY, "");
      llRegionSayTo(toucher, meter_chan, "Ping");
    } else {
      llRegionSayTo(toucher, 0, "Not close enough to touch this.");
    }
  }
  http_response(key request_id, integer status, list metadata, string body) {
    if (request_id == http_request_id) {
      if (llSubStringIndex(body, "ERR,") == 0) {
        llSay(0, "Error: " + llGetSubString(body, 4, llStringLength(body) - 1));
      } else if (llSubStringIndex(body, "STAT,") == 0) {
        list fields = llCSV2List(llGetSubString(body, 5, llStringLength(body) - 1));
        integer experience = llList2Integer(fields, 3);
        integer level = llList2Integer(fields, 14);
        if (level >= min_level) {
          integer rand = llRound(llFrand(sum));
          integer i; integer running = 0;
          for (i=0;i<num_droppables;i+=2) {
            running += llList2Integer(droppables, i+1);
            if (running >= rand) {
              received_item = llList2String(droppables, i);
              string msg = success_msg;

              string params = "STAT,";

              float rand = llFrand(100);
              if (rand < (float)xp_penalty_probability_percent) {
                params += "-" + (string)xp_penalty_amount;
                msg = damage_msg;
              }
              params += ",";

              rand = llFrand(100);
              if (rand < (float)health_damage_probability_percent) {
                params += "-" + (string)health_damage_amount;
                msg = damage_msg;
              }

              if (msg == damage_msg) {
                llRegionSayTo(toucher,
                              meter_chan,
                              params + ",,,,,"
                             );
                llSetTimerEvent(15);
                meter_listener = llListen(meter_chan, "", NULL_KEY, "");
              } else {
                llGiveInventory(toucher, received_item);
                string params = "uuid=" + (string)toucher + "&hash=" + llSHA1String((string)toucher + hash_seed)
                              + "&action=c&is_crit_fail=No&item=" + received_item
                              + "&source=" + machine_name
                              + "&cooldown=" + (string)((integer)((1 + llFrand(2 * cooldown_seconds_variation_percent) - cooldown_seconds_variation_percent) * cooldown_seconds));
                http_request_id = llHTTPRequest("https://example.com/sl-rp-hud/",
                                                [
                                                  HTTP_METHOD, "POST",
                                                  HTTP_MIMETYPE, "application/x-www-form-urlencoded"
                                                ],
                                                params);
              }

              integer index;
              while ((index = llSubStringIndex(msg, "ITEM_NAME")) > -1) {
                msg = llGetSubString(msg, 0, index - 1) + received_item + llGetSubString(msg, index + 9, llStringLength(msg) - 1);
              }

              llRegionSayTo(toucher, 0, msg);
              return;
            }
          }
          llRegionSayTo(toucher, 0, "Did not select an object. This should not have happened.");
        } else {
          llSay(0, "You do not have the minimum required level (" + (string)min_level + ") to use this device.");
        }
      } else if (body != "SILENT") {
        llSay(0, "Unexpected response: " + body);
      }
    } else {
      llRegionSayTo(toucher, meter_chan, "1");
    }
  }
  listen(integer channel, string name, key id, string message) {
    if (channel == meter_chan) {
      if (message == "1") {
        llGiveInventory(toucher, received_item);
        llSetTimerEvent(0);
        llListenRemove(meter_listener);
        string params = "uuid=" + (string)toucher + "&hash=" + llSHA1String((string)toucher + hash_seed)
                      + "&action=c&is_crit_fail=No&item=" + received_item
                      + "&source=" + machine_name
                      + "&cooldown=" + (string)((integer)((1 + llFrand(2 * cooldown_seconds_variation_percent) - cooldown_seconds_variation_percent) * cooldown_seconds));

        http_request_id = llHTTPRequest("https://example.com/sl-rp-hud/",
                                        [
                                          HTTP_METHOD, "POST",
                                          HTTP_MIMETYPE, "application/x-www-form-urlencoded"
                                        ],
                                        params);
      } else if (llSubStringIndex(message, "Pong,") == 0) {
        llSetTimerEvent(0);
        if ((key)llGetSubString(message, 5, llStringLength(message) -1) == toucher) {
          string params = "uuid=" + (string)toucher + "&hash=" + llSHA1String((string)toucher + hash_seed)
                        + "&action=r&is_drop=1&source=" + machine_name;

          http_request_id = llHTTPRequest("https://example.com/sl-rp-hud/",
                                          [
                                            HTTP_METHOD, "POST",
                                            HTTP_MIMETYPE, "application/x-www-form-urlencoded"
                                          ],
                                          params);
        }
      }
    }
  }
  timer() {
    llSetTimerEvent(0);
    llListenRemove(meter_listener);
    llSay(0, "Your HUD did not respond in time. You may have to detach and reattach.");
  }
}
